<?php
// auto-generated by sfDoctrineAdmin
// date: 2013/02/15 16:31:24
?>
<?php

/**
 * reservation actions.
 *
 * @package    sf_sandbox
 * @subpackage reservation
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @author     Olivier Verdier <Olivier.Verdier@gmail.com>
 * @version    SVN: $Id: actions.class.php 5639 2007-10-23 14:27:18Z Eric.Fredj $
 */
class reservationActions extends sfActions
{
  public function executeIndex ()
  {
    return $this->forward('reservation', 'list');
  }

  public function executeList ()
  {
  	$this->hotels_reservations = Doctrine::getTable('HotelsReservation')->findAll();
  }

  public function executeShow ()
  {
    $this->hotels_reservation = Doctrine::getTable('HotelsReservation')->find($this->getRequestParameter('id'));    
    $this->forward404Unless($this->hotels_reservation);
  }

  public function executeCreate ()
  {
    $this->hotels_reservation = new HotelsReservation();
    $this->setTemplate('edit');
  }

  public function executeEdit ()
  {
    $this->hotels_reservation = Doctrine::getTable('HotelsReservation')->find($this->getRequestParameter('id'));    
    $this->forward404Unless($this->hotels_reservation);
  }

  public function executeDelete ()
  {
    $this->hotels_reservation = Doctrine::getTable('HotelsReservation')->find($this->getRequestParameter('id'));    
    
    $this->forward404Unless($this->hotels_reservation);

    try
    {
      $this->hotels_reservation->delete();
      $this->redirect('reservation/list');
    }
    catch (Doctrine_Exception $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Hotels reservation. Make sure it does not have any associated items.');
      return $this->forward('reservation', 'list');
    }
  }

  public function executeUpdate ()
  {
    if (!$this->getRequestParameter('id'))
    {
      $hotels_reservation = new HotelsReservation();
    }
    else
    {
      $hotels_reservation = Doctrine::getTable('HotelsReservation')->find($this->getRequestParameter('id'));
      $this->forward404Unless($hotels_reservation);
    }

    $formData = $this->getRequestParameter('hotels_reservation');
    if ($newValue = $formData['HotelsClient'])
    {
       $hotels_reservation->set('client_id', (empty($newValue) ? null : $newValue));
    }
    if ($newValue = $formData['HotelsRoomType'])
    {
       $hotels_reservation->set('room_id', (empty($newValue) ? null : $newValue));
    }
    if ($newValue = $formData['total'])
    {
	     $hotels_reservation->set('total', $newValue);
    }
    if ($newValue = $formData['hash'])
    {
	     $hotels_reservation->set('hash', $newValue);
    }
    if ($newValue = $formData['reserved_from'])
    {
       $dateFormat = new sfDateFormat($this->getUser()->getCulture());
       $hotels_reservation->set('reserved_from', $dateFormat->format($newValue, 'I', $dateFormat->getInputPattern('g')));
    }
    if ($newValue = $formData['reserved_to'])
    {
       $dateFormat = new sfDateFormat($this->getUser()->getCulture());
       $hotels_reservation->set('reserved_to', $dateFormat->format($newValue, 'I', $dateFormat->getInputPattern('g')));
    }

    $hotels_reservation->save();

    return $this->redirect('reservation/show?id='.$hotels_reservation->id);
  }
}
