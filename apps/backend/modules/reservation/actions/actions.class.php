<?php
// auto-generated by sfDoctrineAdmin
// date: 2013/02/15 16:31:24
?>
<?php

/**
 * reservation actions.
 *
 * @package    sf_sandbox
 * @subpackage reservation
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @author     Olivier Verdier <Olivier.Verdier@gmail.com>
 * @version    SVN: $Id: actions.class.php 5639 2007-10-23 14:27:18Z Eric.Fredj $
 */
class reservationActions extends autoreservationActions{
    
    const SECONDS_PER_DAY = 86400;
    
    public function validateEdit() {
        if($this->getRequest()->getMethod() == sfRequest::POST) {
            
            $reservation = $this->getRequestParameter('hotels_reservation', array());
            if(empty($reservation)){
                $this->setFlash('error', 'Invalid request');
                $this->redirect('reservation');
            }
            
            // check client
            $client_email = filter_var($reservation['client_email'], 
                FILTER_VALIDATE_EMAIL);
            $this->client_id = (int) $reservation['client_id'];
            if(empty($client_email)){
               $this->getRequest()->setError('hotels_reservation{client_email_edit}'
                    , 'Invalid e-mail value.');
            } 
            if(empty($this->client_id) && !empty($client_email)){
                $this->client_id = Doctrine_Manager::connection()
                    ->fetchOne('SELECT id FROM hotels_client WHERE email = ?'
                        , array($client_email));
            }else if(!empty($client_email)){
                $this->client_id = Doctrine_Manager::connection()
                    ->fetchOne('SELECT id FROM hotels_client WHERE email = ? AND id = ?'
                        , array($client_email, $this->client_id));
            }else{
                $this->getRequest()->setError('hotels_reservation{client_email_edit}'
                    , 'No such client with specified e-mail.');
            }
            
            // check reservation data (from)
            if( date('Y-m-d H:i') > $reservation['reserved_from'] ){
                $this->getRequest()->setError('hotels_reservation{reserved_from}', 
                    'Invalid selected date.');
            }
            
            // check reservation data (from)
            if( $reservation['reserved_from'] > $reservation['reserved_to'] ){
                $this->getRequest()->setError('hotels_reservation{reserved_to}', 
                    'Invalid selected date.');
            }
            
            $this->days = (int) ceil((strtotime($reservation['reserved_to']) - 
                strtotime($reservation['reserved_from'])) / 
                self::SECONDS_PER_DAY);
            
            // check room number
            $this->total_cost = array();
            if(empty($reservation['room_id'])){
                $this->getRequest()->setError('hotels_reservation{room_edit}'
                    , 'Not specified room number.');
            }
            $this->rooms_id = is_array($reservation['room_id']) ? 
                $reservation['room_id'] : array($reservation['room_id']);
            
            foreach($this->rooms_id as $room_id){
                if(!is_numeric($room_id)){
                    $this->getRequest()->setError('hotels_reservation{room_edit}', 
                        'Invalid room number.');
                }else{
                    //calculate full cost
                    $this->total_cost[$room_id] = Doctrine_Manager::connection()
                        ->fetchOne('SELECT price FROM hotels_room WHERE id = ?', 
                            array($room_id)) * $this->days; 
                }
            }
            
            // room total cost
            if(
                !empty($reservation['total']) && 
                (int) $reservation['total'] !== array_sum($this->total_cost)
            ){
                $this->getRequest()->setError('hotels_reservation{total_edit}'
                    , 'Do not match the amount of the reservation.');
            }
        }
        return !$this->getRequest()->hasErrors();
    }


    protected function addFiltersCriteria($q){
        parent::addFiltersCriteria($q);
        
        if(isset($this->filters['email']) && $this->filters['email'] !== ''){
            
            $this->filters['email'] = preg_replace('/[^\w@\-\.]+/i', '', 
                $this->filters['email']);

            $q->addWhere("HotelsReservation.HotelsClient.email like ?", 
                array("%{$this->filters['email']}%"));
        }
        
        if (isset($this->filters['client_name']) && $this->filters['client_name'] !== ''){
        
            $this->filters['client_name'] = preg_replace('/[ ]+/i', ' ', 
                trim($this->filters['client_name']));
            $this->filters['client_name'] = preg_replace('/[^\w ]+/i', '', 
                $this->filters['client_name']);

            $q->innerJoin("HotelsReservation.HotelsClient c");
            $q->addWhere("c.first_name like ? OR c.last_name like ?",  
                array("%{$this->filters['client_name']}%", "%{$this->filters['client_name']}%"));
        }
    }
    
    protected function updateHotelsReservationFromRequest(){
        
        parent::updateHotelsReservationFromRequest();
        
        $this->hotels_reservation->set('client_id', $this->client_id);
        
        //set the room id
        $this->hotels_reservation->set('room_id', $this->room_id);

        //calculate full cost of booking
        $this->hotels_reservation->set('total', $this->total_cost[$this->room_id]);
    }
    
    public function executeEdit(){
        
        //define our execute function in else case
        
        $this->hotels_reservation = $this->getHotelsReservationOrCreate();

        if ($this->getRequest()->getMethod() == sfRequest::POST){
            
            //multiple save or single updated
            
            foreach($this->rooms_id as $this->room_id){
                try{
                    $this->hotels_reservation = $this->getHotelsReservationOrCreate();
                    $this->updateHotelsReservationFromRequest();
                    $this->saveHotelsReservation($this->hotels_reservation);
                    $this->setFlash('notice', 'Your modifications have been saved');
                }catch( Doctrine_Connection_Mysql_Exception $e){
                    $this->setFlash('warning', $e->errorMessage());
                    return $this->redirect('reservation/create');
                }
            }
            
            //action after reservation
            if ($this->getRequestParameter('save_and_add')){
                return $this->redirect('reservation/create');
            }else if ($this->getRequestParameter('save_and_list')){
                return $this->redirect('reservation/list');
            }else{
                return $this->redirect('reservation/edit?id='.$this->hotels_reservation->id);
            }  
        }else{
          $this->addJavascriptsForEdit();

          $this->labels = $this->getLabels();
        }

        // temporary fix to avoid using a distinct editSuccess.php template
        sfLoader::loadHelpers(array('Helper', 'ObjectDoctrineAdmin'));
    }
    
    public function executeShow(){
        $reservation_id = (int) $this->getRequestParameter('id', 0);
        
        if(empty($reservation_id)){
            $this->setFlash('warning', 'Invalid reservation id');
            $this->redirect('reservation');
        }
        
        $this->hotels_reservation = Doctrine::getTable('HotelsReservation')->find($reservation_id);
        
        if(empty($this->hotels_reservation)){
            $this->setFlash('warning', 'Reservation with such id not exist');
            $this->redirect('reservation');
        }
    }
}
